# 3 задание. Два различных натуральных числа n и m называются дружественными, если сумма делителей числа n﻿ (
# включая 1, но исключая само n) равна числу m и наоборот. Например, 220 и 284 – дружественные числа. По данному
# числу k выведите все пары дружественных чисел, каждое из которых не превосходит ﻿k﻿.
#
# Формат входных данных
# Программа получает на вход одно натуральное число k, не превосходящее 10^5. Числа m﻿ и ﻿n﻿ не превосходят ﻿10^9.
#
# Формат выходных данных Программа должна вывести все пары дружественных чисел, каждое из которых не превосходит ﻿k﻿.
# Пары необходимо выводить по одной в строке, разделяя пробелами. Каждая пара должна быть выведена только один раз (
# перестановка чисел новую пару не дает). Числа в парах должны быть отсортированы по возрастанию, а сами пары — по
# возрастанию первых элементов пар.

# Примеры данных
# Ввод      Вывод
# 300       220 284

def sum_of_divisors(n):
    """Функция для вычисления суммы делителей числа n, включая 1, но исключая само n"""
    total = 1
    sqrt_n = int(n ** 0.5)
    for i in range(2, sqrt_n + 1):
        if n % i == 0:
            total += i
            if i != n // i:
                total += n // i
    return total


def find_amicable_numbers(k):
    """Функция для нахождения всех пар дружественных чисел до k"""
    amicable_pairs = []
    visited = set()

    for n in range(2, k + 1):
        if n in visited:
            continue
        m = sum_of_divisors(n)
        if m != n and m <= k:
            if sum_of_divisors(m) == n:
                visited.add(m)
                amicable_pairs.append((n, m))

    return amicable_pairs


# Чтение входного числа k
k = int(input())

# Нахождение и вывод всех пар дружественных чисел до k
amicable_pairs = find_amicable_numbers(k)
for n, m in sorted(amicable_pairs):
    print(n, m)

